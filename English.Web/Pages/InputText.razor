@page "/inputText"
@page "/"
@using System.Text.Json
@using English.Web.Logic
@using English.Web.Model
@inject InputTextModel InputModel
@inject PhonemizationFetcher PhonemeFetcher
@inject HttpClient Http

<PageTitle>InputText</PageTitle>

<h3>Input Text</h3>

<div class="side-by-side container">
    <div class="side-by-side-text container">
        <div class="side-by-side-row row">
            @foreach (var model in GetModels())
            {
                <button @onclick="() => ToggleHidden(model)" class="side-by-side-text-button btn btn-primary form-control col-md-3">Edit @model.Label Text</button>
            }
            <button @onclick="() => SetPhonemization()" class="side-by-side-text-button btn-primary form-control col-md-3">Phonemize</button>
            <select @bind="InputModel.Language" class="side-by-side-text-button col-md-3 form-control">
                @foreach (var language in Languages)
                {
                    <option value="@language.Key" class="form-control">@language.Value</option>
                }
            </select>
        </div>
        <div class="side-by-side-row row">
            @foreach (var model in GetModels())
            {
                <textarea class="side-by-side-row side-by-side-text-area form-control col-md-@(12 / Math.Max(1, GetModels().Where(m => !m.Hidden).Count()))"
                      hidden="@model.Hidden" @bind="model.Text">
                </textarea>
            }
        </div>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        Languages = await Http.GetFromJsonAsync<Dictionary<String, String>>("data/languages.json") ?? GetDefaultLanguages();

        if (String.IsNullOrEmpty(InputModel.Language))
        {
            InputModel.Language = GetDefaultLanguages().Keys.First();
        }
    }
    
    private Dictionary<String, String> Languages = new();

    private void ToggleHidden(TextModel model) => model.Hidden = !model.Hidden;

    private IEnumerable<TextModel> GetModels() => new List<TextModel> { InputModel.OriginalText, InputModel.PhonemeText };

    private async Task SetPhonemization()
    {
        String phonemization = await PhonemeFetcher.GetPhonemization(InputModel.OriginalText.Text, InputModel.Language);

        InputModel.PhonemeText.Hidden = false;
        InputModel.PhonemeText.Text = phonemization;
    }

    private Dictionary<String, String> GetDefaultLanguages() => new() { ["en-us"] = "English (United States)" };
}