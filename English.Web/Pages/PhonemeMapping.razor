@page "/phonemeMapping"
@page "/"
@using System.Text.Json
@using English.Web.Logic
@using English.Web.Model
@using System.Text
@using System.Text.Encodings.Web;
@using System.Text.Unicode
@inject IJSRuntime JSRuntime
@inject PhonemizationFetcher PhonemeFetcher
@inject PhonemeMappingModel Phonemes
@inject HttpClient Http
@inject JsonSerializerOptionsBuilder JsonOptionsBuilder

<PageTitle>PhonemeMapping</PageTitle>

<h3>Phoneme Mapping</h3>

<div class="side-by-side container">
    <div class="side-by-side-row row">
        @foreach (var phonemeSet in PhonemeSets)
        {
        <button @onclick="async () => await LoadPhonemes(phonemeSet)" class="side-by-side-text-button col-md-2 form-control btn btn-primary">Load @(phonemeSet.Label) phonemes</button>
        }
        <button @onclick="() => ClearPhonemes()" class="side-by-side-text-button col-md-2 form-control btn btn-primary">Clear phonemes</button>
        <button @onclick="async () => await ExportToClipboard()" class="side-by-side-text-button col-md-2 form-control btn btn-primary">
            Export mapping to clipboard
        </button>
        <button @onclick="async () => await ImportFromClipboard()" class="side-by-side-text-button col-md-2 form-control btn btn-primary">
            Import mapping from clipboard
        </button>
    </div>

    <div class="side-by-side-row row">
        @foreach (String key in Phonemes.Mapping.Keys)
        {
            <div class="side-by-side-pair col-md-2">
                <span class="side-by-side-key form-text">@key </span>
                <input @bind="Phonemes.Mapping[key]" class="side-by-side-value form-control"></input>
                <button @onclick="() => RemovePhoneme(key)" class="side-by-side-remove btn btn-close"></button>
            </div>
        }
        <div class="side-by-side-pair col-md-2">
            <button @onclick="() => AddPhoneme()" class="side-by-side-key form-control btn btn-primary">+</button>
            <input @bind="NewPhoneme" class="side-by-side-value form-control"></input>
        </div>
    </div>
</div>

@code {

    private String NewPhoneme = String.Empty;

    private IEnumerable<PhonemeSetModel> PhonemeSets = new List<PhonemeSetModel>
    {
        new("Stressed GA", "stressed-ga"),
        new("Stressed Dutch Variant", "stressed_dutch_variant"),
        new("Dutch Variant", "dutch_variant"),
    };

    private void AddPhoneme()
    {
        if (!Phonemes.Mapping.ContainsKey(NewPhoneme))
        {
            Phonemes.Mapping[NewPhoneme] = NewPhoneme;
            NewPhoneme = String.Empty;
        }
    }

    private void RemovePhoneme(String key)
    {
        if (key is not null && Phonemes.Mapping.ContainsKey(key))
        {
            Phonemes.Mapping.Remove(key);
        }
    }

    private void ClearPhonemes() => Phonemes.Mapping.Clear();

    private async Task LoadPhonemes(PhonemeSetModel phonemeSet)
    {
        Phonemes.Mapping = await Http.GetFromJsonAsync<Dictionary<String, String>>($"data/phoneme-mappings/{phonemeSet.FileName}.json") ?? new();
    }

    private async Task ExportToClipboard()
    {
        JsonSerializerOptions options = JsonOptionsBuilder.BuildOptions();
        String serializedMapping = JsonSerializer.Serialize(Phonemes.Mapping, options);

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", serializedMapping);
    }

    private async Task ImportFromClipboard()
    {
        try
        {
            String serializedMapping = await JSRuntime.InvokeAsync<String>("navigator.clipboard.readText");

            Phonemes.Mapping = JsonSerializer.Deserialize<Dictionary<String, String>>(serializedMapping) ?? new();
        }
        catch (Exception ex)
        {
            Console.Write(ex.ToString());
        }
    }
}