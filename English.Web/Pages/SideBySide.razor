@page "/sideBySide"
@using System.Text.Json

<PageTitle>SideBySide</PageTitle>

<h3>Spelling Reform</h3>

<div class="side-by-side container">
    <div class="side-by-side-row row">
        @foreach (String key in PhonemeMapping.Keys)
        {
            <div class="side-by-side-pair col-md-1">
                <span class="side-by-side-key">@key </span><input @bind="PhonemeMapping[key]" class="side-by-side-value"></input>
            </div>
        }
    </div>


    <div class="side-by-side-text container">
        <div class="side-by-side-row row">
            <button @onclick="() => LoadRP()" class="side-by-side-text-button col-md-2">Load RP phonemes</button>
            <button @onclick="() => LoadGA()" class="side-by-side-text-button col-md-2">Load GA phonemes</button>
        </div>

        <div class="side-by-side-row row">
            @foreach (var model in new List<TextModel> { OriginalText, PhonemeText })
            {
                <button @onclick="() => ToggleHidden(model)" class="side-by-side-text-button col-md-2">Edit @model.Label Text</button>
            }
        </div>
        <div class="side-by-side-row row">
            @foreach (var model in new List<TextModel> { OriginalText, PhonemeText })
            {
                <textarea hidden="@model.Hidden" @bind="model.Text"></textarea>
            }
        </div>
    </div>

    <div class="side-by-side-result container">
        <div class="side-by-side-row row">
            <button @onclick="() => BuildResultText()" class="side-by-side-result-button">Show Result</button>
        </div>
        <div class="side-by-side-row row">
            <span>@Result</span>
        </div>
    </div>
</div>

@code {
    private record class TextModel(String Label, String Text = "", Boolean Hidden = true)
    {
        public Boolean Hidden { get; set; } = Hidden;
        public String Text { get; set; } = Text;
    }

    private TextModel OriginalText = new("Original");
    private TextModel PhonemeText = new("Phoneme");

    private void ToggleHidden(TextModel model) => model.Hidden = !model.Hidden;

    private String Result = String.Empty;

    private Dictionary<String, String> PhonemeMapping = new();

    private void BuildResultText()
    {
        Int32 maxLength = GetMaxClusterLength();
        Int32 index = 0;

        List<String> textMapping = new();

        while (index < PhonemeText.Text.Length)
        {
            IEnumerable<Int32> range = Enumerable.Range(0, Math.Min(maxLength, PhonemeText.Text.Length - index));
            IEnumerable<String> clusters = range.Select(clusterIndex => PhonemeText.Text[index..(index + 1 + clusterIndex)]);

            List<String> matchingClusters = clusters.Reverse<String>().Where(PhonemeMapping.ContainsKey).ToList();
            String? tentativeMapping = matchingClusters.Select(cluster => PhonemeMapping[cluster]).FirstOrDefault();

            String mapping = tentativeMapping ?? PhonemeText.Text[index].ToString();
            index += matchingClusters.FirstOrDefault()?.Length ?? 1;

            textMapping.Add(mapping);
        }

        String joinedText = String.Join(String.Empty, textMapping);

        Result = joinedText;
    }

    private Int32 GetMaxClusterLength() => PhonemeMapping.Keys.Max(cluster => cluster.Length);

    private void LoadRP()
    {
        IEnumerable<String> phonemes = new List<String>
        {
            "p",
            "t",
            "k",
            "f",
            "θ",
            "s",
            "ʃ",
            "ʧ",
            "j",
            "ŋ",
            "b",
            "d",
            "ɡ",
            "v",
            "ð",
            "z",
            "ʒ",
            "ʤ",
            "w",
            "h",
            "l",
            "r",
            "m",
            "n",
            "ɪ",
            "i(ː)",
            "iː",
            "ɛ",
            "eɪ",
            "æ",
            "aɪ",
            "ə",
            "ʌ",
            "ɒ",
            "əʊ",
            "ʊ",
            "uː",
            "aʊ",
            "ɔɪ",
            "ɑː",
            "ɔː",
            "ɜː",
            "ˈ",
            "ˌ",
        };

        BuildDictionaryFromList(phonemes);
    }

    private void LoadGA()
    {
        IEnumerable<String> phonemes = new List<String>
        {
            "p",
            "t",
            "k",
            "f",
            "θ",
            "s",
            "ʃ",
            "ʧ",
            "j",
            "ŋ",
            "b",
            "d",
            "ɡ",
            "v",
            "ð",
            "z",
            "ʒ",
            "ʤ",
            "w",
            "h",
            "l",
            "r",
            "m",
            "n",
            "ɪ",
            "i",
            "ɛ",
            "eɪ",
            "æ",
            "aɪ",
            "ə",
            "ʌ",
            "ɑ",
            "oʊ",
            "ʊ",
            "u",
            "ɔ",
            "aʊ",
            "ɔɪ",
            "ɑr",
            "ɔr",
            "ir",
            "ɜr",
            "ˈ",
            "ˌ",
        };

        BuildDictionaryFromList(phonemes);
    }

    private void BuildDictionaryFromList(IEnumerable<String> phonemes)
    {
        PhonemeMapping = phonemes.ToDictionary(phoneme => phoneme, phoneme => phoneme);
    }
}