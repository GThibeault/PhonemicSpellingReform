@page "/"
@using System.Text.Json
@using English.Web.Logic
@using English.Web.Logic.Phonemes;
@inject PhonemizationFetcher PhonemeFetcher
@inject SpellingMapper Mapper

<PageTitle>SideBySide</PageTitle>

<h3>Spelling Reform</h3>

<div class="side-by-side container">
    <div class="side-by-side-row row">
        @foreach (String key in PhonemeMapping.Keys)
        {
            <div class="side-by-side-pair col-md-1">
                <span class="side-by-side-key">@key </span><input @bind="PhonemeMapping[key]" class="side-by-side-value"></input>
            </div>
        }
        <div class="side-by-side-pair col-md-1">
            <button @onclick="() => AddPhoneme()" class="side-by-side-key">+</button><input @bind="NewPhoneme" class="side-by-side-value"></input>
        </div>
    </div>


    <div class="side-by-side-text container">
        <div class="side-by-side-row row">
            <button @onclick="() => LoadToPhoneticsRP()" class="side-by-side-text-button col-md-2">Load TP-RP phonemes</button>
            <button @onclick="() => LoadToPhoneticsGA()" class="side-by-side-text-button col-md-2">Load TP-GA phonemes</button>
            <button @onclick="() => LoadPhonemizerGA()" class="side-by-side-text-button col-md-2">Load GA phonemes</button>
        </div>

        <div class="side-by-side-row row">
            @foreach (var model in new List<TextModel> { OriginalText, PhonemeText })
            {
                <button @onclick="() => ToggleHidden(model)" class="side-by-side-text-button col-md-2">Edit @model.Label Text</button>
            }
            <button @onclick="() => SetPhonemization()" class="side-by-side-text-button col-md-2">Phonemize</button>
        </div>
        <div class="side-by-side-row row">
            @foreach (var model in new List<TextModel> { OriginalText, PhonemeText })
            {
                <textarea hidden="@model.Hidden" @bind="model.Text"></textarea>
            }
        </div>
    </div>

    <div class="side-by-side-result container">
        <div class="side-by-side-row row">
            <button @onclick="() => GetResultText()" class="side-by-side-result-button">Show Result</button>
        </div>

        @foreach (var line in Result)
        {
            <div class="side-by-side-row row">
                <span class="side-by-side-result-text">@line</span>
                <br />
            </div>
        }
    </div>
</div>

@code {
    private record class TextModel(String Label, String Text = "", Boolean Hidden = true)
    {
        public Boolean Hidden { get; set; } = Hidden;
        public String Text { get; set; } = Text;
    }

    private TextModel OriginalText = new("Original");
    private TextModel PhonemeText = new("Phoneme");

    private void ToggleHidden(TextModel model) => model.Hidden = !model.Hidden;

    private IEnumerable<String> Result = new List<String>();

    private Dictionary<String, String> PhonemeMapping = new();

    private String NewPhoneme = String.Empty;
    private void AddPhoneme()
    {
        if (!PhonemeMapping.ContainsKey(NewPhoneme))
        {
            PhonemeMapping[NewPhoneme] = NewPhoneme;
            NewPhoneme = String.Empty;
        }
    }

    private void GetResultText()
    {
        IEnumerable<String> resultLines = Mapper.BuildResultText(PhonemeMapping, PhonemeText.Text);

        Result = resultLines;
    }

    private async Task SetPhonemization()
    {
        String phonemization = await PhonemeFetcher.GetPhonemization(OriginalText.Text);

        PhonemeText.Hidden = false;
        PhonemeText.Text = phonemization;
    }

    private void LoadToPhoneticsRP() => LoadPhonemes(new ToPhoneticsRPPhonemeFetcher());
    private void LoadToPhoneticsGA() => LoadPhonemes(new ToPhoneticsGAPhonemeFetcher());
    private void LoadPhonemizerGA() => LoadPhonemes(new PythonPhonemizerPhonemeFetcher());

    private void LoadPhonemes(IPhonemeFetcher fetcher) => PhonemeMapping = fetcher.GetPhonemeDict();
}