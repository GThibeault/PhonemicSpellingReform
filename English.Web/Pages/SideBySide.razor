@page "/sideBySide"
@using System.Text.Json
@using English.Web.Logic
@using English.Web.Model
@inject SpellingMapper Mapper
@inject PhonemeMappingModel Phonemes
@inject InputTextModel InputModel

<PageTitle>Reformed Spelling</PageTitle>

<h3>Reformed Spelling</h3>

<div class="side-by-side container">
    <div class="side-by-side-result row container">
        <div class="side-by-side-row row">
            <button @onclick="() => ToggleSideBySide()" class="side-by-side-text-button btn btn-primary form-control col-md-2">Toggle Side by Side</button>
        </div>
        <div class="col-md-@(GetResultColumns())">
            @foreach (var line in Result)
            {
                <div class="side-by-side-row row">
                    <span class="side-by-side-result-text form-text">@line</span>
                    <br />
                </div>
            }
        </div>
        <div hidden="@(!ShowSideBySide)" class="col-md-@(GetResultColumns())">
            <span></span>
            @foreach (var line in InputModel.OriginalText.Text.Split(Environment.NewLine))
            {
                <div class="side-by-side-row row">
                    <span class="side-by-side-result-text form-text">@line</span>
                    <br />
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<String> Result = new List<String>();

    protected override void OnInitialized()
    {
        Result = GetResultText();
    }

    private Boolean ShowSideBySide = false;
    private void ToggleSideBySide() => ShowSideBySide = !ShowSideBySide;
    private Int32 GetResultColumns() => ShowSideBySide ? 6 : 12;

    private IEnumerable<String> GetResultText()
    {
        IEnumerable<String> resultLines = Mapper.BuildResultText(Phonemes.Mapping, InputModel.PhonemeText.Text);

        return resultLines;
    }
}