@page "/sideBySide"
@using System.Text.Json
@using English.Web.Logic
@using English.Web.Logic.Phonemes;
@using English.Web.Model
@inject PhonemizationFetcher PhonemeFetcher
@inject SpellingMapper Mapper
@inject PhonemeMappingModel Phonemes

<PageTitle>SideBySide</PageTitle>

<h3>Spelling Reform</h3>

<div class="side-by-side container">
    <div class="side-by-side-text container">
        <div class="side-by-side-row row">
            @foreach (var model in GetModels())
            {
                <button @onclick="() => ToggleHidden(model)" class="side-by-side-text-button col-md-2">Edit @model.Label Text</button>
            }
            <button @onclick="() => SetPhonemization()" class="side-by-side-text-button col-md-2">Phonemize</button>
            <button @onclick="() => GetResultText()" class="side-by-side-text-button col-md-2">Show Result</button>
            <button @onclick="() => ToggleSideBySide()" class="side-by-side-text-button col-md-2">Toggle Side by Side</button>
        </div>
        <div class="side-by-side-row row">
            @foreach (var model in GetModels())
            {
                <textarea class="side-by-side-row col-md-@(12 / Math.Max(1, GetModels().Where(m => !m.Hidden).Count()))"
                      hidden="@model.Hidden" @bind="model.Text">
                </textarea>
            }
        </div>
    </div>

    <div class="side-by-side-result row container">
        <div hidden="@(!ShowSideBySide)" class="col-md-@(GetResultColumns())">
            <span></span>
            @foreach (var line in OriginalText.Text.Split(Environment.NewLine))
            {
                <div class="side-by-side-row row">
                    <span class="side-by-side-result-text">@line</span>
                    <br />
                </div>
            }
        </div>
        <div class="col-md-@(GetResultColumns())">
            @foreach (var line in Result)
            {
                <div class="side-by-side-row row">
                    <span class="side-by-side-result-text">@line</span>
                    <br />
                </div>
            }
        </div>
    </div>
</div>

@code {
    private record class TextModel(String Label, String Text = "", Boolean Hidden = true)
    {
        public Boolean Hidden { get; set; } = Hidden;
        public String Text { get; set; } = Text;
    }

    private TextModel OriginalText = new("Original");
    private TextModel PhonemeText = new("Phoneme");

    private void ToggleHidden(TextModel model) => model.Hidden = !model.Hidden;

    private IEnumerable<TextModel> GetModels() => new List<TextModel> { OriginalText, PhonemeText };

    private IEnumerable<String> Result = new List<String>();

    private Boolean ShowSideBySide = false;
    private void ToggleSideBySide() => ShowSideBySide = !ShowSideBySide;
    private Int32 GetResultColumns() => ShowSideBySide ? 6 : 12;

    private void GetResultText()
    {
        IEnumerable<String> resultLines = Mapper.BuildResultText(Phonemes.Mapping, PhonemeText.Text);

        Result = resultLines;
    }

    private async Task SetPhonemization()
    {
        String phonemization = await PhonemeFetcher.GetPhonemization(OriginalText.Text);

        PhonemeText.Hidden = false;
        PhonemeText.Text = phonemization;
    }
}